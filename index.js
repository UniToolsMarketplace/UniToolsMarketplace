const express = require("express");
const path = require("path");
const nodemailer = require("nodemailer");
const multer = require("multer");
const { v4: uuidv4 } = require("uuid");
require("dotenv").config();

console.log("DEBUG: ENV VARS");
console.log("XATA_API_KEY:", process.env.XATA_API_KEY ? "[SET]" : "[MISSING]");
console.log("XATA_DATABASE_URL:", process.env.XATA_DATABASE_URL);

const { getXataClient } = require("./xata.client"); // generated by "npx xata init"
const xata = getXataClient();

// ---------------- APP SETUP ----------------
process.on("uncaughtException", (err) => {
  console.error("[UNCAUGHT EXCEPTION]", err);
});
process.on("unhandledRejection", (reason) => {
  console.error("[UNHANDLED REJECTION]", reason);
});

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public")));

// Multer: store files in memory (not disk)
const upload = multer({ storage: multer.memoryStorage() });

// Nodemailer
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// OTP store
const otpStore = {};

// ---------------- ROUTES ----------------
app.get("/", (req, res) =>
  res.sendFile(path.join(__dirname, "public/index.html"))
);
app.get("/preowned/sell", (req, res) =>
  res.sendFile(path.join(__dirname, "public/sell.html"))
);
app.get("/preowned/buy", (req, res) =>
  res.sendFile(path.join(__dirname, "public/buy.html"))
);
app.get("/preowned/lease", (req, res) =>
  res.sendFile(path.join(__dirname, "public/lease.html"))
);
app.get("/preowned/rent", (req, res) =>
  res.sendFile(path.join(__dirname, "public/rent.html"))
);
app.get("/listing/:id", (req, res) =>
  res.sendFile(path.join(__dirname, "public/listing.html"))
);
app.get("/faculties", (req, res) =>
  res.sendFile(path.join(__dirname, "public/faculties.html"))
);
app.get("/dentistry", (req, res) =>
  res.sendFile(path.join(__dirname, "public/dentistry.html"))
);
app.get("/preowned", (req, res) =>
  res.sendFile(path.join(__dirname, "public/preowned.html"))
);

// ---------------- SELL LISTINGS WITH PAGINATION, SORT, SEARCH ----------------
app.get("/api/sell/listings", async (req, res) => {
  let { page = 1, limit = 5, sort = "none", search = "" } = req.query;
  page = parseInt(page);
  limit = parseInt(limit);

  // Default sorting: newest first
  let sortColumn = "xata.createdAt";
  let sortOrder = "desc";

  if (sort === "price_asc") {
    sortColumn = "price";
    sortOrder = "asc";
  } else if (sort === "price_desc") {
    sortColumn = "price";
    sortOrder = "desc";
  }

  let filter = { is_published: true };

if (search && search.trim() !== "") {
  filter.item_name = { $contains: search };
}

  const result = await xata.db.sell_listings
    .filter(filter)
    .sort(sortColumn, sortOrder) // ✅ FIXED
    .getPaginated({
      pagination: { size: limit, offset: (page - 1) * limit },
    });

  const listings = result.records.map((l) => ({
    ...l,
    images: l.images ? l.images.map((file) => file.url) : [],
  }));

  res.json({
    listings,
    total: result.totalCount,
    page,
    totalPages: Math.ceil(result.totalCount / limit),
  });
});

app.post('/preowned/sell', upload.array('images'), async (req, res) => {
  console.log("BODY:", req.body);
  console.log("FILES:", req.files);

  const {
    seller_name = "",
    email,
    contact_number = "",
    whatsapp_number = "",
    item_name,
    item_description = "",
    price,
    price_period = "",
  } = req.body;

  if (!email || !email.endsWith("@bue.edu.eg"))
    return res.status(400).send("Email must be @bue.edu.eg domain");
  if (!item_name || !price)
    return res.status(400).send("Missing required fields");

  // size check (200 KB total)
  const totalSize = req.files.reduce((sum, f) => sum + f.size, 0);
  if (totalSize > 200 * 1024)
    return res
      .status(400)
      .send("Total image size cannot exceed 200KB. Please compress your images.");

  const id = uuidv4();
  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  otpStore[email] = { otp, listingId: id, type: "sell" };


const record = await xata.db.sell_listings.create({
  seller_name: req.body.seller_name,
  email: req.body.email,
  contact_number: req.body.contact_number,
  whatsapp_number: req.body.whatsapp_number,
  item_name: req.body.item_name,
  item_description: req.body.item_description,
  price: parseFloat(req.body.price) || 0,
  images: req.files.map((file) => ({
    name: file.originalname,
    mediaType: file.mimetype,
    base64Content: file.buffer.toString("base64"),
  })),
});


  const baseUrl = process.env.BASE_URL || `http://localhost:${port}`;
  const verifyUrl = `${baseUrl}/verify-otp/sell?id=${id}&email=${encodeURIComponent(
    email
  )}`;
  transporter.sendMail(
    {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "OTP for Your Sell Listing",
      html: `<p>Your OTP: <b>${otp}</b></p><p>Verify: <a href="${verifyUrl}">${verifyUrl}</a></p>`,
    },
    () => {}
  );
  res.send(`<h1>OTP sent to your email!</h1><a href="${verifyUrl}">Verify here</a>`);
});

app.get("/verify-otp/sell", (req, res) => {
  res.send(`<form action="/verify-otp/sell" method="POST">
    <input type="hidden" name="id" value="${req.query.id}" />
    <input type="hidden" name="email" value="${req.query.email}" />
    <label>Enter OTP:</label><input name="otp" required />
    <button type="submit">Verify</button>
  </form>`);
});

app.post("/verify-otp/sell", async (req, res) => {
  const { id, email, otp } = req.body;
  const otpData = otpStore[email];
  if (
    !otpData ||
    otpData.otp !== otp ||
    otpData.listingId !== id ||
    otpData.type !== "sell"
  )
    return res.status(400).send("Invalid OTP");

  await xata.db.sell_listings.update(id, { is_published: true });
  delete otpStore[email];
  res.send(`<h1>Sell Listing Verified!</h1><a href="/preowned/buy">View listings</a>`);
});

// ---------------- LEASE LISTINGS ----------------
app.get("/api/lease/listings", async (req, res) => {
  let { page = 1, limit = 5, sort = "none", search = "" } = req.query;
  page = parseInt(page);
  limit = parseInt(limit);

  let sortColumn = "xata.createdAt";
  let sortOrder = "desc";

  if (sort === "price_asc") {
    sortColumn = "price";
    sortOrder = "asc";
  } else if (sort === "price_desc") {
    sortColumn = "price";
    sortOrder = "desc";
  }

  let filter = { is_published: true };

if (search && search.trim() !== "") {
  filter.item_name = { $contains: search };
}

  const result = await xata.db.lease_listings
    .filter(filter)
    .sort(sortColumn, sortOrder) // ✅ FIXED
    .getPaginated({
      pagination: { size: limit, offset: (page - 1) * limit },
    });

  const listings = result.records.map((l) => ({
    ...l,
    images: l.images ? l.images.map((file) => file.url) : [],
  }));

  res.json({
    listings,
    total: result.totalCount,
    page,
    totalPages: Math.ceil(result.totalCount / limit),
  });
});

app.post("/preowned/lease", upload.array("images"), async (req, res) => {
  const {
    seller_name = "",
    email,
    contact_number = "",
    whatsapp_number = "",
    item_name,
    item_description = "",
    price,
    price_period = "",
  } = req.body;

  if (!email || !email.endsWith("@bue.edu.eg"))
    return res.status(400).send("Email must be @bue.edu.eg domain");
  if (!item_name || !price)
    return res.status(400).send("Missing required fields");

  // size check (5 MB total)
  const totalSize = req.files.reduce((sum, f) => sum + f.size, 0);
  if (totalSize > 5 * 1024 * 1024)
    return res.status(400).send("Total image size cannot exceed 5MB");

  const id = uuidv4();
  const otp = Math.floor(100000 + Math.random() * 900000).toString();
  otpStore[email] = { otp, listingId: id, type: "lease" };


const record = await xata.db.lease_listings.create({
  seller_name: req.body.seller_name,
  email: req.body.email,
  contact_number: req.body.contact_number,
  whatsapp_number: req.body.whatsapp_number,
  item_name: req.body.item_name,
  item_description: req.body.item_description,
  price: parseFloat(req.body.price) || 0,
  images: req.files.map((file) => ({
    name: file.originalname,
    mediaType: file.mimetype,
    base64Content: file.buffer.toString("base64"),
  })),
});


  const baseUrl = process.env.BASE_URL || `http://localhost:${port}`;
  const verifyUrl = `${baseUrl}/verify-otp/lease?id=${id}&email=${encodeURIComponent(
    email
  )}`;
  transporter.sendMail(
    {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "OTP for Your Lease Listing",
      html: `<p>Your OTP: <b>${otp}</b></p><p>Verify: <a href="${verifyUrl}">${verifyUrl}</a></p>`,
    },
    () => {}
  );
  res.send(`<h1>OTP sent to your email!</h1><a href="${verifyUrl}">Verify here</a>`);
});

app.get("/verify-otp/lease", (req, res) => {
  res.send(`<form action="/verify-otp/lease" method="POST">
    <input type="hidden" name="id" value="${req.query.id}" />
    <input type="hidden" name="email" value="${req.query.email}" />
    <label>Enter OTP:</label><input name="otp" required />
    <button type="submit">Verify</button>
  </form>`);
});

app.post("/verify-otp/lease", async (req, res) => {
  const { id, email, otp } = req.body;
  const otpData = otpStore[email];
  if (
    !otpData ||
    otpData.otp !== otp ||
    otpData.listingId !== id ||
    otpData.type !== "lease"
  )
    return res.status(400).send("Invalid OTP");

  await xata.db.lease_listings.update(id, { is_published: true });
  delete otpStore[email];
  res.send(`<h1>Lease Listing Verified!</h1><a href="/preowned/rent">View listings</a>`);
});

// Get single SELL listing by ID
app.get("/api/sell/listings/:id", async (req, res) => {
  const { id } = req.params;
  const record = await xata.db.sell_listings.read(id);

  if (!record || !record.is_published) {
    return res.status(404).send("Listing not found");
  }

  const listing = {
    ...record,
    images: record.images ? record.images.map((file) => file.url) : [],
  };

  res.json(listing);
});

// Get single LEASE listing by ID
app.get("/api/lease/listings/:id", async (req, res) => {
  const { id } = req.params;
  const record = await xata.db.lease_listings.read(id);

  if (!record || !record.is_published) {
    return res.status(404).send("Listing not found");
  }

  const listing = {
    ...record,
    images: record.images ? record.images.map((file) => file.url) : [],
  };

  res.json(listing);
});

// ---------------- SERVER ----------------
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Server running on port ${port}`));
